LifeCycle Hook

beforeCreate: 객체 생성 준비 => 객체가 생성되지 않았기 때문에 데이터 접근 불가
created : 객체 생성 => 데이터 접근 가능 => DB 접속

beforeMount: 화면에 그려질 준비 하는 과정
mounted : 화면 그려지고 나서 데이터 접근 => 자식 컴포넌트에서 값이 넘어올때 (딜레이가 조금 걸려도 되는 경우)

befroeUpdate: 정보가 변경되기 전 호출 과정
updated: 무한루프에 빠질 가능성이 매우 높으므로 hook 사용 지양(그냥 쓰지 말자)

beforeDestroy: 해당 컴포넌트가 소멸할 준비 => 현재 컴포넌트 작업을 서버에 보내거나 다른 컴포넌트에 값을 보내기 위한 마무리 작업
destroyed : 해당 컴포넌트가 소멸 => 소멸했기 때문에 컴포넌트에 접근 불가

컴포넌트는 독립된 작업이기 때문에 자식과 부모간에 데이터 접근이 어렵다
부모가 자식에게 데이터를 전달 : 강제성 => 단방향 : 자식에서 데이터 변경 불가
자식이 부모에게 데이터를 전달 : emit : 이벤트 처리 방식(=웹소켓) => 자식이 부모에게 알림 전송
자식이 부모 데이터를 전달하면 부모 데이터가 바뀌어서 다른 자식 데이터에도 영향을 끼칠 수 있다.
=> 의도치 않은 변경이 일어날 수 있기 때문에 약간의 절차가 필요함

cd webworkspace/vue             -- vue 디렉토리 이동
vue create second-project;      --second-project 생성
first => enter;